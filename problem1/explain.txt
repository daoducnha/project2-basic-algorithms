function sqrt:
    args: number
    it will call sqrt_func to get square root of a given number

function sqrt_func:
    args: number, arr = [1..number-1]
    if number equal 0 or 1. If it is, then return this number
    else:
        It will loop is the with binary search algorithm. It continues as long as start is less than or equal to end. Inside the loop, the function calculates the mid index by taking the average of start and end and rounding down using integer division (//).
        The code then checks if the square of the number at index mid in the array (arr[mid] * arr[mid]) is equal to the given number. If it is, then the function has found the square root and returns the number at index mid.
        If the square of the number at index mid is less than the given number, the function updates start to mid + 1 and assigns the current number at index mid to the variable rs. This is done to keep track of the closest number to the square root in case the exact square root is not found.
        If the square of the number at index mid is greater than the given number, the function updates end to mid - 1 to narrow down the search range.
        Finally, if the while loop completes without finding the exact square root, the function returns the value of rs, which represents the closest number to the square root.

    Big 0 of this function is O(log(n)) because the code uses a while loop to perform a binary search on the arr list to find the correct answer. The time complexity of a binary search is O(log(n)), where n is the number of elements in the arr list.

